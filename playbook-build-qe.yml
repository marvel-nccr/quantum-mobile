- name: Install ansible prerequisites

  hosts: "{{ build_hosts | default('vagrant-ssh') }}"
  gather_facts: false

  pre_tasks:

  - name: test configuration
    tags: [init]
    debug:
      msg: RUNNING PLAYBOOK FOR '{{ vm_name }}' VERSION '{{ vm_version }}'
  - name: testing ansible environment
    tags: [init]
    debug:
      msg: Connecting to host '{{ inventory_hostname }}' as user '{{ ansible_user }}'
  - name: Install linux-headers-generic for guest-additions
    tags: [init]
    when: "inventory_hostname.startswith('vagrant')"
    become: true
    apt:
      cache_valid_time: 86400  # One day
      name:
      - linux-headers-generic
  - name: Make local dist folder
    tags: [init]
    local_action:
      module: file
      state: directory
      path: "{{ local_dist_folder }}/"
    when: release_notes_locally is defined and release_notes_locally

- name: set up the VM (QE Only)
  hosts: "{{ build_hosts | default('vagrant-ssh') }}"

  roles:

  - name: add user {{ vm_user }} with key
    role: marvel-nccr.add_user
    tags: [add_user]
    vars:
      add_user_name: "{{ vm_user }}"
      add_user_password: "{{ vm_password }}"
      add_user_groups:
      - "{{ vm_user }}"
      - sudo
      add_user_passwordless_sudo: true

  - role: marvel-nccr.simulationbase
    tags: [simulationbase]
    vars:
      simulationbase_vm_user: "{{ vm_user }}"
      simulationbase_hostname: "{{ vm_hostname }}"
      simulationbase_codes_folder: "{{ vm_codes_folder }}"
      simulationbase_tmz: Europe/Zurich

  - role: marvel-nccr.ubuntu_desktop
    tags: [ubuntu_desktop]
    vars:
      ubuntu_desktop_browser: "{{ vm_browser }}"
      ubuntu_desktop_vm_user: "{{ vm_user }}"
    when: not vm_headless

  - role: marvel-nccr.quantum_mobile_customizations
    tags: [qm_customizations]
    vars:
      qm_customizations_browser: "{{ vm_browser }}"
      qm_customizations_vm_user: "{{ vm_user }}"
      qm_customizations_vm_password: "{{ vm_password }}"
      qm_customizations_vm_name: "{{ vm_name }}"
      qm_customizations_vm_version: "{{ vm_version }}"
      qm_customizations_vm_author: "{{ vm_author }}"
      qm_customizations_headless: "{{ vm_headless }}"
      qm_customizations_examples_folder: "{{ vm_examples_folder }}"
      qm_customizations_examples_readme: "{{ vm_examples_folder_reamde }}"
      qm_customizations_data_folder: "{{ vm_data_folder }}"
      qm_customizations_readme_file: "{{ vm_readme_file }}"
      qm_customizations_homepage: "https://quantum-mobile.readthedocs.io"
      qm_customizations_urls:
        Quantum ESPRESSO: http://www.quantum-espresso.org/

  - role: marvel-nccr.editors
    tags: [editors]
    vars:
      editors_vm_user: "{{ vm_user }}"

  - role: marvel-nccr.slurm
    tags: [slurm]

  - role: marvel-nccr.quantum_espresso
    tags: [quantum_espresso]
    vars:
      quantum_espresso_data_folder: "{{ vm_data_folder }}"
      quantum_espresso_version: "6.7MaX-Release"

  - role: geerlingguy.nodejs  # this is used by jupyterlab and aiidalab
    tags: [aiida, nodejs]
    become: true
    become_user: "{{ root_user }}"
    vars:
      nodejs_version: 12.x
      nodejs_install_npm_user: "{{ root_user }}"

  - role: marvel-nccr.aiida
    tags: [aiida]
    become: true
    become_user: "{{ vm_user }}"
    vars:
      aiida_source_folder: "{{ vm_codes_folder }}"
      aiida_data_folder: "{{ vm_data_folder }}/aiida"
      aiida_computer_cpus: "{{ vm_cpus }}"
      aiida_computer_scheduler: "{{ vm_scheduler }}"
      aiida_examples_folder: "{{ vm_examples_folder }}"
      aiida_venv: "{{ aiida_venv_base }}/aiida"
      aiida_jupyter_venv: "{{ aiida_venv_base }}/jupyter"
      aiida_venv_constraints: "{{ vm_data_folder }}/aiida/constraints.txt"
      aiida_plugins:
        aiida-quantumespresso:
          version: "3.4.2"
          code_prefix: qe
          codes_var: "quantum_espresso_executables"
          omit_plugins: ["quantumespresso.hp", "wannier90"]

  - name: aiidalab
    role: marvel-nccr.aiidalab
    become: true
    become_user: "{{ vm_user }}"
    tags: [aiidalab]
    vars:
      aiidalab_aiida_venv: "{{ aiida_venv_base }}/aiida"
      aiidalab_aiida_jupyter_venv: "{{ aiida_venv_base }}/jupyter"
      aiidalab_aiida_venv_constraints: "{{ vm_data_folder }}/aiida/constraints.txt"

  post_tasks:

  - name: Check package version integrity in virtualenv
    command: "{{ aiida_venv }}/bin/pip check --no-color"
    become: true
    become_user: "{{ vm_user }}"
    changed_when: false
    tags: [aiida, aiidalab, pipcheck]

  # pymatgen can fail when the numpy it was compiled against is downgraded/upgraded
  # (e.g. due to a package pinning numpy)
  - name: test pymatgen import
    command: "{{ aiida_venv }}/bin/python -c 'import pymatgen'"
    become: true
    become_user: "{{ vm_user }}"
    changed_when: false
    tags: [aiida, aiidalab, pymatgen]

  # the following tasks should only be run after the machine is fully provisioned
  # since these tasks break idempotence

  - name: apt-get clean  # noqa 303
    tags: [never, cleanup]
    become: true
    command: apt-get clean

  - name: wipe apt lists
    tags: [never, cleanup]
    become: true
    shell: "rm -rf /var/lib/apt/lists/*"  # noqa 302

  - name: wipe user cache
    tags: [never, cleanup]
    become: true
    become_user: "{{ vm_user }}"
    file:
      state: absent
      path: "~/.cache"

  - name: wipe root user cache
    tags: [never, cleanup]
    become: true
    file:
      state: absent
      path: "~/.cache"
