- name: Install ansible prerequisites

  hosts: "{{ build_hosts | default('vagrant-ssh') }}"
  gather_facts: false

  pre_tasks:

  - name: test configuration
    tags: [init]
    debug:
      msg: RUNNING PLAYBOOK FOR '{{ vm_name }}' VERSION '{{ vm_version }}'

  - name: testing ansible environment
    tags: [init]
    debug:
      msg: Connecting to host '{{ inventory_hostname }}' as user '{{ ansible_user }}'

  # run `apt update` here, when `not inventory_hostname.startswith('vagrant')`

  - name: Install linux-headers-generic for guest-additions
    tags: [init]
    when: "inventory_hostname.startswith('vagrant')"
    become: true
    apt:
      cache_valid_time: 86400  # One day
      name:
      - linux-headers-generic

  - name: Make local dist folder
    tags: [init]
    local_action:
      module: file
      state: directory
      path: "{{ local_dist_folder }}/"
    when: release_notes_locally is defined and release_notes_locally

- name: set up the VM
  hosts: "{{ build_hosts | default('vagrant-ssh') }}"

  roles:

  - name: add user {{ vm_user }} with key
    role: marvel-nccr.add_user
    tags: [add_user]
    vars:
      add_user_name: "{{ vm_user }}"
      add_user_password: "{{ vm_password }}"
      add_user_groups:
      - "{{ vm_user }}"
      - sudo
      add_user_passwordless_sudo: true

  - name: "Set the machine hostname: {{ vm_hostname }}"
    role: set_hostname
    when: cloud_platform != 'docker'
    tags: [set_hostname]

  # - add aptitude
  # - run apt upgrade
  # - don't pip install psutil, use python3-psutil instead?

  - role: marvel-nccr.ubuntu_desktop
    tags: [ubuntu_desktop]
    vars:
      ubuntu_desktop_browser: "{{ vm_browser }}"
      ubuntu_desktop_vm_user: "{{ vm_user }}"
    when: not vm_headless
  # tip, use Ctrl+Alt+F3 to login via the terminal, if there is an issue

  - role: marvel-nccr.quantum_mobile_customizations
    tags: [qm_customizations]
    vars:
      qm_customizations_browser: "{{ vm_browser }}"
      qm_customizations_vm_user: "{{ vm_user }}"
      qm_customizations_vm_password: "{{ vm_password }}"
      qm_customizations_vm_name: "{{ vm_name }}"
      qm_customizations_vm_version: "{{ vm_version }}"
      qm_customizations_vm_author: "{{ vm_author }}"
      qm_customizations_headless: "{{ vm_headless }}"
      qm_customizations_data_folder: "{{ vm_data_folder }}"
      qm_customizations_readme_file: "{{ vm_readme_file }}"
      qm_customizations_examples_folder:
      qm_customizations_examples_readme:
      qm_customizations_homepage: "https://quantum-mobile.readthedocs.io"
      qm_customizations_urls:
        Abinit: https://www.abinit.org
        BigDFT: http://www.bigdft.org
        CP2K: https://www.cp2k.org
        Fleur: http://www.flapw.de/
        NWChem: https://nwchemgit.github.io/
        Quantum ESPRESSO: http://www.quantum-espresso.org/
        Siesta: https://gitlab.com/siesta-project/siesta
        Wannier90: http://www.wannier.org
        Yambo: http://www.yambo-code.org/

  - role: marvel-nccr.editors
    tags: [editors]
    vars:
      editors_vm_user: "{{ vm_user }}"

  - role: marvel-nccr.slurm
    tags: [slurm]

  - role: marvel-nccr.aiida_cws
    tags: [aiida]
    become: true
    become_user: "{{ vm_user }}"
    vars:
      aiida_release_notes: "{{ vm_release_notes }}"
      aiida_root_user: "{{ root_user }}"
      aiida_data_folder_temp: "{{ vm_data_folder }}/aiida"
      aiida_timezone_name: "{{ vm_timezone }}"
      aiida_create_swapfile: "{{ vm_create_swapfile }}"
      aiida_computer_defaults:
        hostname: localhost
        run_folder: "${HOME}/.aiida_run"
        mpi_cmd: "mpirun -np {tot_num_mpiprocs}"
        default_mpiprocs: "{{ vm_cpus }}"
        configure: "--safe-interval 0"
      aiida_conda_code_computer: local_slurm_conda

  post_tasks:

  # - name: Check package version integrity in virtualenv
  #   command: "{{ aiida_venv }}/bin/pip check --no-color"
  #   become: true
  #   become_user: "{{ vm_user }}"
  #   changed_when: false
  #   tags: [aiida, pipcheck]

  # the following tasks should only be run after the machine is fully provisioned
  # since these tasks break idempotence

  - name: apt-get clean
    tags: [never, cleanup]
    become: true
    command: apt-get clean

  - name: wipe apt lists
    tags: [never, cleanup]
    become: true
    command: "rm -rf /var/lib/apt/lists/*"  # noqa 302

  - name: wipe user cache
    tags: [never, cleanup]
    become: true
    become_user: "{{ vm_user }}"
    file:
      state: absent
      path: "~/.cache"

  - name: wipe root user cache
    tags: [never, cleanup]
    become: true
    file:
      state: absent
      path: "~/.cache"
