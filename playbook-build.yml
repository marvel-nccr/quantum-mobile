- name: Prepare for VM build

  hosts: "{{ build_hosts | default('vagrant-ssh') }}"
  gather_facts: false

  pre_tasks:

  - name: test configuration
    tags: [init]
    debug:
      msg: RUNNING PLAYBOOK FOR '{{ vm_name }}' VERSION '{{ vm_version }}'

  - name: testing ansible environment
    tags: [init]
    debug:
      msg: Connecting to host '{{ inventory_hostname }}' as user '{{ ansible_user }}'

  - name: Install linux-headers-generic for guest-additions
    tags: [init]
    when: "inventory_hostname.startswith('vagrant')"
    become: true
    apt:
      cache_valid_time: 86400  # One day
      name:
      - linux-headers-generic

  - name: Make local dist folder
    tags: [init]
    local_action:
      module: file
      state: directory
      path: "{{ local_dist_folder }}/"
    when: release_notes_locally is defined and release_notes_locally

- name: Build VM
  hosts: "{{ build_hosts | default('vagrant-ssh') }}"

  tasks:

  # Generic Tasks
  # These tasks are run for any VM build, regardless of the software installed
  # They setup the VM user, commandline interface, and (optionally) desktop GUI

  - name: Update system package managers (apt, pip)
    tags: [init]
    include_tasks: tasks/ensure-apt-pip.yml

  - name: "Add QM user '{{ vm_user }}'"
    tags: [add_user]
    import_tasks: tasks/add-qm-user.yml

  - name: "Add release notes section for the operating system"
    tags: [release_notes]
    import_tasks: tasks/release-notes-system.yml

  - name: Customise bash terminal for QM
    tags: [customise-bash]
    become: true
    become_user: "{{ vm_user }}"
    import_tasks: tasks/customise-bash.yml

  - name: Install common text editors
    tags: [editors]
    import_role:
      name: marvel-nccr.editors
    vars:
      editors_vm_user: "{{ vm_user }}"

  - name: Add desktop GUI
    tags: [ubuntu_desktop]
    when: not vm_headless
    import_role:
      name: marvel-nccr.ubuntu_desktop
    vars:
      ubuntu_desktop_vm_user: "{{ vm_user }}"
      ubuntu_desktop_browser: "{{ vm_browser }}"

  - name: Customise GUI for QM
    tags: [customise-gui]
    when: not vm_headless
    become: true
    become_user: "{{ vm_user }}"
    import_tasks: tasks/customise-gui.yml

  - name: Setup QM to run simulations
    tags: [simsetup]
    import_tasks: tasks/simulation-setup.yml

  # Build Specific Tasks
  # These tasks can be customised for specific VM builds,
  # depending on the software one requires to be installed

  - name: "Add user README"
    tags: [add_readme]
    become: true
    become_user: "{{ vm_user }}"
    template:
      src: tasks/files/README.md.j2
      dest: "{{ readme_vm_path }}"
    vars:
      software_urls:
        # Abinit: https://www.abinit.org
        # BigDFT: http://www.bigdft.org
        # CP2K: https://www.cp2k.org
        # Fleur: http://www.flapw.de/
        # NWChem: https://nwchemgit.github.io/
        Quantum ESPRESSO: http://www.quantum-espresso.org/
        # Siesta: https://gitlab.com/siesta-project/siesta
        # Wannier90: http://www.wannier.org
        # Yambo: http://www.yambo-code.org/

  - name: Install plotting tools (via apt)
    # TODO we may want to eventually install these with conda
    tags: [plotting]
    import_tasks: tasks/plotting-apt.yml
    vars:
      packages: [grace, gnuplot, xcrysden, jmol, default-jre]

  - name: install SLURM service
    tags: [slurm]
    import_role:
      name: marvel-nccr.slurm

  - name: install RabbitMQ server service
    tags: [rabbitmq]
    become: true
    become_user: "{{ root_user }}"
    import_tasks: tasks/rabbitmq.yml

  - name: install PostrgeSQL server service
    tags: [postgresql]
    become: true
    become_user: "{{ root_user }}"
    import_tasks: tasks/postgresql.yml

  - name: install mamba
    tags: [mamba]
    import_role:
      name: chrisjsewell.conda.user_install
    become: true
    become_user: "{{ vm_user }}"
    vars:
      conda_folder: "~/.conda"
      conda_installer_url: https://github.com/conda-forge/miniforge/releases/download/4.14.0-0/Mambaforge-4.14.0-0-Linux-x86_64.sh
      conda_installer_checksum: sha256:d47b78b593e3cf5513bafbfa6a51eafcd9f0e164c41c79c790061bb583c82859
      conda_activate_alias: workon

  - name: Install AiiDA environment
    tags: [aiida]
    become: true
    become_user: "{{ vm_user }}"
    chrisjsewell.conda.install_pkgs:
      executable: "~/.conda/bin/mamba"
      env: aiida
      packages:
      - python=3.9
      - pip
      - aiida-core=2
      - aiida-quantumespresso=4
      - aiida-pseudo=0.7
      - ipykernel
      - jupyterlab=3

  - name: "Activate verdi TAB completion"
    tags: [aiida-autocomplete]
    become: true
    become_user: "{{ vm_user }}"
    ansible.builtin.copy:
      dest: "~/.conda/envs/aiida/etc/conda/activate.d/verdi-complete.sh"
      content: 'eval "$(_VERDI_COMPLETE=bash_source verdi)"'

  - name: Create an aiida-profile
    tags: [aiida-profile]
    become: true
    become_user: "{{ vm_user }}"
    import_tasks: tasks/aiida-profile.yml
    vars:
      name: generic
      aiida_run_verdi: "~/.conda/bin/conda run -n aiida verdi"
      postgres_user: postgres
      parameters:
        first_name: Max
        last_name: Scientist
        email: aiida@localhost
        institution: Quantum Mobile
        db_host: localhost
        db_port: 5432
        db_name: aiidadb
        db_username: aiida
        db_password: "ne9N_LDK-*JSS"

  - name: "Create AiiDA computers"
    tags: [aiida-computers]
    become: true
    become_user: "{{ vm_user }}"
    import_tasks: tasks/aiida-computers.yml
    vars:
      aiida_run_verdi: "~/.conda/bin/conda run -n aiida verdi"
      aiida_computer_defaults:
        transport: core.local
        hostname: localhost
        work_dir: "~/.aiida_run"
        mpi_cmd: "mpirun -np {tot_num_mpiprocs}"
        default_mpiprocs: 2
        configure: "--safe-interval 0"
      aiida_computers:
      - label: local_direct
        scheduler: core.direct
      - label: local_slurm
        scheduler: core.slurm

  # now login to the machine and run these manually:

  # TODO per code? system wide ok?
  # echo "export OMP_NUM_THREADS=1" >> ~/.bashrc
  # echo "export OMP_NUM_THREADS=1" >> ~/.profile

  # git clone https://github.com/epfl-theos/koopmans.git
  # cd koopmans
  # make submodules
  # make espresso
  # This also removes the qe bin: make clean_espresso

  # echo "export PATH=$PATH:/home/max/koopmans/bin" >> ~/.bashrc

  # mamba create -n koopmans python=3.9 pip
  # conda activate koopmans
  # pip install -e .

  post_tasks:

  - name: apt-get clean  # noqa 303
    tags: [never, cleanup]
    become: true
    command: apt-get clean

  - name: wipe apt lists
    tags: [never, cleanup]
    become: true
    shell: "rm -rf /var/lib/apt/lists/*"  # noqa 302

  - name: wipe user cache
    tags: [never, cleanup]
    become: true
    become_user: "{{ vm_user }}"
    file:
      state: absent
      path: "~/.cache"

  - name: wipe root user cache
    tags: [never, cleanup]
    become: true
    file:
      state: absent
      path: "~/.cache"

  - name: clean conda cache
    # for a discussion on using -f, see: https://github.com/jupyter/docker-stacks/issues/861
    tags: [never, cleanup]
    become: true
    become_user: "{{ vm_user }}"
    command: "~/.conda/bin/mamba clean --yes --all -f"
